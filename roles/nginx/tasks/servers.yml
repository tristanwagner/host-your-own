- name: Clear existing servers
  block:
    - name: Rm sites-enabled
      file:
        state: absent
        path: "/etc/nginx/sites-enabled"

    - name: Mkdir sites-enabled
      file:
        state: directory
        path: "/etc/nginx/sites-enabled"
        mode: 0755

# TODO: depends on onion tasks
- name: Get onion address
  slurp:
    src: "/var/lib/tor/hidden_service/hostname"
  register: onion_address
  ignore_errors: true

- name: Set default onion address if missing
  set_fact:
    onion_address: { "content": "NOT_FOUND" }
  when: onion_address.failed is defined and onion_address.failed

- name: Config website server
  template:
    src: "nginx-website"
    dest: "/etc/nginx/sites-enabled/website"
    mode: 0644

- name: Build list of services to proxy (based on tags)
  set_fact:
    active_services: >-
      {{
        ([service.nextcloud] if 'nextcloud' in ansible_run_tags or ansible_run_tags | length == 0 else []) +
        ([service.vault] if 'vault' in ansible_run_tags or ansible_run_tags | length == 0 else []) +
        ([service.searx] if 'searx' in ansible_run_tags or ansible_run_tags | length == 0 else []) +
        ([service.gitea] if 'gitea' in ansible_run_tags or ansible_run_tags | length == 0 else []) +
        ([service.umami] if 'umami' in ansible_run_tags or ansible_run_tags | length == 0 else [])
      }}

- name: Config proxy server for services
  vars:
    serv_subdom: "{{ item.subdomain }}"
    serv_port: "{{ item.port }}"
  template:
    src: nginx-service
    dest: "/etc/nginx/sites-enabled/{{ item.subdomain }}"
    mode: 0644
  loop: "{{ active_services }}"
  loop_control:
    label: "{{ item.subdomain }}"

- name: Enable and restart nginx
  tags: ignore-ci # ci doesn't boot with systemd
  service:
    name: nginx
    enabled: true
    state: restarted
